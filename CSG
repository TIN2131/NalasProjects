import React, { useState } from 'react';
import { Treemap, Tooltip, ResponsiveContainer } from 'recharts';
import { Card, CardHeader, CardContent } from '@/components/ui/card';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';

// Sample data - replace with your actual data
const partners = [
  { name: "Partner A", primaryService: "Audit" },
  { name: "Partner B", primaryService: "Tax" },
  { name: "Partner C", primaryService: "Business Management" },
  { name: "Partner D", primaryService: "Bankruptcy" },
  { name: "Partner E", primaryService: "Informatics" },
];

const services = ["Audit", "Tax", "Business Management", "Business Solutions", "Bankruptcy", "Informatics"];

const generateData = (partner) => {
  const data = services.map(service => ({
    name: service,
    size: Math.random() * 100,
    color: service === partner.primaryService ? '#4CAF50' : '#2196F3'
  }));
  return [{ name: 'services', children: data }];
};

const generateCrossSellData = (partner) => {
  return services.map(service => ({
    name: service,
    crossSellPercentage: Math.random() * 100
  }));
};

const ServiceDistribution = () => {
  const [selectedPartner, setSelectedPartner] = useState(partners[0]);
  const [treeMapData, setTreeMapData] = useState(generateData(selectedPartner));
  const [crossSellData, setCrossSellData] = useState(generateCrossSellData(selectedPartner));

  const handlePartnerChange = (partnerName) => {
    const partner = partners.find(p => p.name === partnerName);
    setSelectedPartner(partner);
    setTreeMapData(generateData(partner));
    setCrossSellData(generateCrossSellData(partner));
  };

  return (
    <Card className="w-full max-w-3xl mx-auto">
      <CardHeader>
        <h2 className="text-2xl font-bold">Partner Service Distribution</h2>
        <Select onValueChange={handlePartnerChange} defaultValue={selectedPartner.name}>
          <SelectTrigger className="w-[180px]">
            <SelectValue placeholder="Select a partner" />
          </SelectTrigger>
          <SelectContent>
            {partners.map((partner) => (
              <SelectItem key={partner.name} value={partner.name}>
                {partner.name}
              </SelectItem>
            ))}
          </SelectContent>
        </Select>
      </CardHeader>
      <CardContent>
        <div className="mb-6">
          <h3 className="text-xl font-semibold mb-2">Service Distribution</h3>
          <ResponsiveContainer width="100%" height={300}>
            <Treemap
              data={treeMapData}
              dataKey="size"
              ratio={4/3}
              stroke="#fff"
              fill="#8884d8"
              content={<CustomizedContent colors={treeMapData[0].children.map(item => item.color)} />}
            >
              <Tooltip content={<CustomTooltip />} />
            </Treemap>
          </ResponsiveContainer>
        </div>
        <div>
          <h3 className="text-xl font-semibold mb-2">Cross-Selling Opportunities</h3>
          <div className="grid grid-cols-3 gap-4">
            {crossSellData.map((item) => (
              <div key={item.name} className="bg-gray-100 p-4 rounded">
                <h4 className="font-semibold">{item.name}</h4>
                <div className="w-full bg-gray-200 rounded-full h-2.5 dark:bg-gray-700 mt-2">
                  <div className="bg-blue-600 h-2.5 rounded-full" style={{ width: `${item.crossSellPercentage}%` }}></div>
                </div>
                <p className="text-sm mt-1">{item.crossSellPercentage.toFixed(1)}% Cross-sold</p>
              </div>
            ))}
          </div>
        </div>
      </CardContent>
    </Card>
  );
};

const CustomizedContent = (props) => {
  const { root, depth, x, y, width, height, index, colors, name } = props;

  return (
    <g>
      <rect
        x={x}
        y={y}
        width={width}
        height={height}
        style={{
          fill: depth < 2 ? colors[index] : 'none',
          stroke: '#fff',
          strokeWidth: 2 / (depth + 1e-10),
          strokeOpacity: 1 / (depth + 1e-10),
        }}
      />
      {depth === 1 && (
        <text
          x={x + width / 2}
          y={y + height / 2 + 7}
          textAnchor="middle"
          fill="#fff"
          fontSize={14}
        >
          {name}
        </text>
      )}
    </g>
  );
};

const CustomTooltip = ({ active, payload }) => {
  if (active && payload && payload.length) {
    return (
      <div className="bg-white border p-2 shadow-md">
        <p>{`${payload[0].name} : ${payload[0].value.toFixed(2)}%`}</p>
      </div>
    );
  }
  return null;
};

export default ServiceDistribution;
